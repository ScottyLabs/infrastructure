name: Deploy Infrastructure

on:
  workflow_run:
    workflows: ["CI"]
    types:
      - completed
  workflow_dispatch:
    inputs:
      services:
        description: "Services to deploy (comma-separated, leave empty for all)"
        required: false
        type: string
        default: ''
      environments:
        description: "Environments to deploy to"
        required: true
        type: choice
        options:
        - "dev"
        - "staging"
        - "prod"
        - "dev,staging"
        - "dev,prod"
        - "staging,prod"
        - "dev,staging,prod"
        default: "dev"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false # Don't cancel infrastructure deployments

# Required for OIDC token generation
permissions:
  id-token: write
  contents: read

jobs:
  detect-changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    # Only run if the CI workflow was successful or if manually triggered
    if: github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch'
    outputs:
      matrix: ${{ steps.build-matrix.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        # Don't need to specify fetch depth, changed-files will fetch as required

      - name: Get changed services
        id: changed-services
        uses: tj-actions/changed-files@v46
        with:
          files: services/**
          dir_names: true # Emit unique changed directories instead of filenames
          dir_names_max_depth: 2
          dir_names_exclude_current_dir: true
          json: true

      - name: Get changed environments
        id: changed-environments
        uses: tj-actions/changed-files@v46
        with:
          files: environments/*.tfvars
          json: true

      - name: Build deployment matrix
        id: build-matrix
        run: |
          MATRIX=$(.github/scripts/build-matrix.sh \
            "${{ github.event.inputs.services || '' }}" \
            "${{ github.event.inputs.environments || '' }}" \
            "${{ steps.changed-services.outputs.all_changed_files || '[]' }}" \
            "${{ steps.changed-environments.outputs.all_changed_files || '[]' }}")
          echo "matrix=$MATRIX" >> $GITHUB_OUTPUT

  plan:
    name: Plan (${{ matrix.service }}, ${{ matrix.environment }})
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.matrix != '{"include":[]}'
    # Use GitHub environments for secrets and approval gates
    environment: ${{ matrix.environment }}
    strategy:
      matrix: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Read OpenTofu version
        id: read_version
        run: echo "version=$(cat .opentofu-version)" >> $GITHUB_OUTPUT

      - name: Set up OpenTofu
        uses: opentofu/setup-opentofu@v1
        with:
          tofu_version: ${{ steps.read_version.outputs.version }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-session-name: github-actions-${{ matrix.service }}-${{ matrix.environment }}
          aws-region: us-east-2

      - name: Initialize OpenTofu
        working-directory: services/${{ matrix.service }}
        run: tofu init -backend-config="../../config/${{ matrix.environment }}.tfbackend"

      - name: Plan OpenTofu
        working-directory: services/${{ matrix.service }}
        # Specify -out so apply is guaranteed to take the exact same actions
        run: tofu plan -var-file="../../environments/${{ matrix.environment }}.tfvars" -out=tfplan

      - name: Upload plan
        uses: actions/upload-artifact@v4
        with:
          name: tfplan-${{ matrix.service }}-${{ matrix.environment }}
          path: services/${{ matrix.service }}/tfplan

  apply:
    name: Apply (${{ matrix.service }}, ${{ matrix.environment }})
    runs-on: ubuntu-latest
    needs: [detect-changes, plan]
    if: needs.detect-changes.outputs.matrix != '{"include":[]}' && (github.event.workflow_run.head_branch == 'main' || github.event_name == 'workflow_dispatch')
    strategy:
      matrix: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
    environment: ${{ matrix.environment }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Read OpenTofu version
        id: read_version
        run: echo "version=$(cat .opentofu-version)" >> $GITHUB_OUTPUT

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-session-name: github-actions-${{ matrix.service }}-${{ matrix.environment }}
          aws-region: us-east-2

      - name: Set up OpenTofu
        uses: opentofu/setup-opentofu@v1
        with:
          tofu_version: ${{ steps.read_version.outputs.version }}

      - name: Initialize OpenTofu
        working-directory: services/${{ matrix.service }}
        run: tofu init -backend-config="../../config/${{ matrix.environment }}.tfbackend"

      - name: Download plan
        uses: actions/download-artifact@v4
        with:
          name: tfplan-${{ matrix.service }}-${{ matrix.environment }}
          path: services/${{ matrix.service }}/

      - name: Apply OpenTofu
        working-directory: services/${{ matrix.service }}
        run: tofu apply -auto-approve tfplan
